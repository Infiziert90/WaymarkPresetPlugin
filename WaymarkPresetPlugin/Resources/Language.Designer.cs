//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WaymarkPresetPlugin.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Language {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Language() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WaymarkPresetPlugin.Resources.Language", typeof(Language).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About.
        /// </summary>
        internal static string About {
            get {
                return ResourceManager.GetString("About", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Author:.
        /// </summary>
        internal static string Author {
            get {
                return ResourceManager.GetString("Author", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup Current Config.
        /// </summary>
        internal static string ButtonBackupCurrentConfig {
            get {
                return ResourceManager.GetString("ButtonBackupCurrentConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        internal static string ButtonCancel {
            get {
                return ResourceManager.GetString("ButtonCancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clear All Map View Data.
        /// </summary>
        internal static string ButtonClearAllMapViewData {
            get {
                return ResourceManager.GetString("ButtonClearAllMapViewData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clear All Zone Sort Data.
        /// </summary>
        internal static string ButtonClearAllZoneSortData {
            get {
                return ResourceManager.GetString("ButtonClearAllZoneSortData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy these points into the editor.
        /// </summary>
        internal static string ButtonCopyPointsfromCircleComputer {
            get {
                return ResourceManager.GetString("ButtonCopyPointsfromCircleComputer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new preset using these points.
        /// </summary>
        internal static string ButtonCreatePresetfromCircleComputer {
            get {
                return ResourceManager.GetString("ButtonCreatePresetfromCircleComputer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete.
        /// </summary>
        internal static string ButtonDelete {
            get {
                return ResourceManager.GetString("ButtonDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit.
        /// </summary>
        internal static string ButtonEdit {
            get {
                return ResourceManager.GetString("ButtonEdit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export All Presets to Clipboard.
        /// </summary>
        internal static string ButtonExportAllPresetstoClipboard {
            get {
                return ResourceManager.GetString("ButtonExportAllPresetstoClipboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export to Clipboard.
        /// </summary>
        internal static string ButtonExporttoClipboard {
            get {
                return ResourceManager.GetString("ButtonExporttoClipboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import.
        /// </summary>
        internal static string ButtonImport {
            get {
                return ResourceManager.GetString("ButtonImport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Map View.
        /// </summary>
        internal static string ButtonMapView {
            get {
                return ResourceManager.GetString("ButtonMapView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No.
        /// </summary>
        internal static string ButtonNo {
            get {
                return ResourceManager.GetString("ButtonNo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place.
        /// </summary>
        internal static string ButtonPlace {
            get {
                return ResourceManager.GetString("ButtonPlace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save.
        /// </summary>
        internal static string ButtonSave {
            get {
                return ResourceManager.GetString("ButtonSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save and Close.
        /// </summary>
        internal static string ButtonSaveandClose {
            get {
                return ResourceManager.GetString("ButtonSaveandClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save Current Waymarks.
        /// </summary>
        internal static string ButtonSaveCurrentWaymarks {
            get {
                return ResourceManager.GetString("ButtonSaveCurrentWaymarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show Library.
        /// </summary>
        internal static string ButtonShowLibrary {
            get {
                return ResourceManager.GetString("ButtonShowLibrary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Yes.
        /// </summary>
        internal static string ButtonYes {
            get {
                return ResourceManager.GetString("ButtonYes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Angle Offset (deg).
        /// </summary>
        internal static string CircleComputerTextAngleOffset {
            get {
                return ResourceManager.GetString("CircleComputerTextAngleOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Center Position.
        /// </summary>
        internal static string CircleComputerTextCenterPosition {
            get {
                return ResourceManager.GetString("CircleComputerTextCenterPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This calculator will compute radially symmetric points (&quot;clock spots&quot;) with the information that you give it.  You can then drag these into the preset editor to replace any waymarks with the calculated points, or you can use the buttons at the bottom of this pane..
        /// </summary>
        internal static string CircleComputerTextInstructions1 {
            get {
                return ResourceManager.GetString("CircleComputerTextInstructions1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marker Order.
        /// </summary>
        internal static string CircleComputerTextMarkerOrder {
            get {
                return ResourceManager.GetString("CircleComputerTextMarkerOrder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of Points.
        /// </summary>
        internal static string CircleComputerTextNumberofPoints {
            get {
                return ResourceManager.GetString("CircleComputerTextNumberofPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Radius (y).
        /// </summary>
        internal static string CircleComputerTextRadius {
            get {
                return ResourceManager.GetString("CircleComputerTextRadius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow drag and drop reordering of presets..
        /// </summary>
        internal static string ConfigOptionAllowPresetDragandDrop {
            get {
                return ResourceManager.GetString("ConfigOptionAllowPresetDragandDrop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow drag and drop reordering of zones..
        /// </summary>
        internal static string ConfigOptionAllowZoneDragandDrop {
            get {
                return ResourceManager.GetString("ConfigOptionAllowZoneDragandDrop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always show preset info pane..
        /// </summary>
        internal static string ConfigOptionAlwaysShowInfoPane {
            get {
                return ResourceManager.GetString("ConfigOptionAlwaysShowInfoPane", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attach library window to the game&apos;s waymark window..
        /// </summary>
        internal static string ConfigOptionAttachtoGameWindow {
            get {
                return ResourceManager.GetString("ConfigOptionAttachtoGameWindow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Autoload presets from library..
        /// </summary>
        internal static string ConfigOptionAutoloadPresetsfromLibarary {
            get {
                return ResourceManager.GetString("ConfigOptionAutoloadPresetsfromLibarary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Autosave presets to library..
        /// </summary>
        internal static string ConfigOptionAutosavePresetstoLibrary {
            get {
                return ResourceManager.GetString("ConfigOptionAutosavePresetstoLibrary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Categorize presets by zone..
        /// </summary>
        internal static string ConfigOptionCategorizePresetsbyZone {
            get {
                return ResourceManager.GetString("ConfigOptionCategorizePresetsbyZone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clicking the selected preset unselects it..
        /// </summary>
        internal static string ConfigOptionClickingPresetUnselects {
            get {
                return ResourceManager.GetString("ConfigOptionClickingPresetUnselects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter on Current Zone.
        /// </summary>
        internal static string ConfigOptionFilteronCurrentZone {
            get {
                return ResourceManager.GetString("ConfigOptionFilteronCurrentZone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open and close library with the game&apos;s waymark window..
        /// </summary>
        internal static string ConfigOptionOpenandClosewithGameWindow {
            get {
                return ResourceManager.GetString("ConfigOptionOpenandClosewithGameWindow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show ID numbers next to zone names..
        /// </summary>
        internal static string ConfigOptionShowIDinZoneNames {
            get {
                return ResourceManager.GetString("ConfigOptionShowIDinZoneNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show search box to filter zones in library window..
        /// </summary>
        internal static string ConfigOptionShowLibraryZoneFilterSearchBox {
            get {
                return ResourceManager.GetString("ConfigOptionShowLibraryZoneFilterSearchBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show the index of the preset within the library..
        /// </summary>
        internal static string ConfigOptionShowPresetIndices {
            get {
                return ResourceManager.GetString("ConfigOptionShowPresetIndices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sort zones descending (newest at the top)..
        /// </summary>
        internal static string ConfigOptionSortZonesDescending {
            get {
                return ResourceManager.GetString("ConfigOptionSortZonesDescending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suppress responses to text commands (besides &apos;{0}&apos;)..
        /// </summary>
        internal static string ConfigOptionSuppressTextCommandResponses {
            get {
                return ResourceManager.GetString("ConfigOptionSuppressTextCommandResponses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Preset.
        /// </summary>
        internal static string DefaultPresetName {
            get {
                return ResourceManager.GetString("DefaultPresetName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imported from Circle Computer.
        /// </summary>
        internal static string DefaultPresetNameCircleComputer {
            get {
                return ResourceManager.GetString("DefaultPresetNameCircleComputer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imported.
        /// </summary>
        internal static string DefaultPresetNameImported {
            get {
                return ResourceManager.GetString("DefaultPresetNameImported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discord:.
        /// </summary>
        internal static string Discord {
            get {
                return ResourceManager.GetString("Discord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discord Thread.
        /// </summary>
        internal static string DiscordThread {
            get {
                return ResourceManager.GetString("DiscordThread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy coordinates to....
        /// </summary>
        internal static string DragandDropPreviewCircleComputerWaymark {
            get {
                return ResourceManager.GetString("DragandDropPreviewCircleComputerWaymark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swap Waymark {0} with....
        /// </summary>
        internal static string DragandDropPreviewEditSwapWaymark {
            get {
                return ResourceManager.GetString("DragandDropPreviewEditSwapWaymark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Move To Bottom&gt;.
        /// </summary>
        internal static string DragandDropPreviewMovetoBottom {
            get {
                return ResourceManager.GetString("DragandDropPreviewMovetoBottom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Move To Top&gt;.
        /// </summary>
        internal static string DragandDropPreviewMovetoTop {
            get {
                return ResourceManager.GetString("DragandDropPreviewMovetoTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moving: .
        /// </summary>
        internal static string DragandDropPreviewMovingPreset {
            get {
                return ResourceManager.GetString("DragandDropPreviewMovingPreset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moving: .
        /// </summary>
        internal static string DragandDropPreviewMovingZone {
            get {
                return ResourceManager.GetString("DragandDropPreviewMovingZone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Active.
        /// </summary>
        internal static string EditWindowTextActiveColumnHeader {
            get {
                return ResourceManager.GetString("EditWindowTextActiveColumnHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name: .
        /// </summary>
        internal static string EditWindowTextName {
            get {
                return ResourceManager.GetString("EditWindowTextName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SE has banned people for placing out of bounds waymarks.  Please use caution when manually editing waymark coordinates..
        /// </summary>
        internal static string EditWindowTextOOBWarningMessage {
            get {
                return ResourceManager.GetString("EditWindowTextOOBWarningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zone: .
        /// </summary>
        internal static string EditWindowTextZoneDropdownLabel {
            get {
                return ResourceManager.GetString("EditWindowTextZoneDropdownLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Search: .
        /// </summary>
        internal static string EditWindowTextZoneSearchLabel {
            get {
                return ResourceManager.GetString("EditWindowTextZoneSearchLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Issues.
        /// </summary>
        internal static string GithubIssues {
            get {
                return ResourceManager.GetString("GithubIssues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export/Backup Options.
        /// </summary>
        internal static string HeaderExportandBackupOptions {
            get {
                return ResourceManager.GetString("HeaderExportandBackupOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Circle Calculator.
        /// </summary>
        internal static string HeaderHelpWindowPageCircleCalculator {
            get {
                return ResourceManager.GetString("HeaderHelpWindowPageCircleCalculator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Coordinates.
        /// </summary>
        internal static string HeaderHelpWindowPageCoordinates {
            get {
                return ResourceManager.GetString("HeaderHelpWindowPageCoordinates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Editing.
        /// </summary>
        internal static string HeaderHelpWindowPageEditing {
            get {
                return ResourceManager.GetString("HeaderHelpWindowPageEditing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        internal static string HeaderHelpWindowPageGeneral {
            get {
                return ResourceManager.GetString("HeaderHelpWindowPageGeneral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maps.
        /// </summary>
        internal static string HeaderHelpWindowPageMaps {
            get {
                return ResourceManager.GetString("HeaderHelpWindowPageMaps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import Options.
        /// </summary>
        internal static string HeaderImportOptions {
            get {
                return ResourceManager.GetString("HeaderImportOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Presets.
        /// </summary>
        internal static string HeaderPresets {
            get {
                return ResourceManager.GetString("HeaderPresets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help.
        /// </summary>
        internal static string Help {
            get {
                return ResourceManager.GetString("Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is enabled, you can change the order of preset folders sorted by zone.  New zones will be added at the bottom of the list.  This option has no effect if the &apos;Categorize presets by zone&apos; option is disabled..
        /// </summary>
        internal static string HelpAllowZoneDragandDrop {
            get {
                return ResourceManager.GetString("HelpAllowZoneDragandDrop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically loads the first five presets that exist in the library for a zone when you load into it.  THIS WILL OVERWRITE THE GAME&apos;S SLOTS WITHOUT WARNING, so please do not turn this on until you are certain that you have saved any data that you want to keep.  Consider using this with the auto-import option below to reduce the risk of inadvertent preset loss..
        /// </summary>
        internal static string HelpAutoloadpresetsfromLibrary {
            get {
                return ResourceManager.GetString("HelpAutoloadpresetsfromLibrary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically copies any populated game preset slots into the library upon exiting an instance..
        /// </summary>
        internal static string HelpAutosavePresetstoLibrary {
            get {
                return ResourceManager.GetString("HelpAutosavePresetstoLibrary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copies the current config file to a backup folder in the Dalamud &apos;pluginConfigs&apos; directory..
        /// </summary>
        internal static string HelpBackupCurrentConfig {
            get {
                return ResourceManager.GetString("HelpBackupCurrentConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This deletes all map view pan/zoom/submap state, resetting every map back to default..
        /// </summary>
        internal static string HelpClearAllMapViewData {
            get {
                return ResourceManager.GetString("HelpClearAllMapViewData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This deletes any custom ordering of the zones in the library window, and resets the sort order back to default..
        /// </summary>
        internal static string HelpClearAllZoneSortData {
            get {
                return ResourceManager.GetString("HelpClearAllZoneSortData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shows the internal Content Finder ID of the zone/duty in some places.  Generally only used for debugging..
        /// </summary>
        internal static string HelpShowIDinZoneNames {
            get {
                return ResourceManager.GetString("HelpShowIDinZoneNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When this is checked, a search box will be shown at the top of the library window to filter the zones you want to see.  This has no effect when the &quot;Categorize presets by zone&quot; option is disabled..
        /// </summary>
        internal static string HelpShowLibraryZoneFilterSearchBox {
            get {
                return ResourceManager.GetString("HelpShowLibraryZoneFilterSearchBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The primary use of this is if you need to know the preset index to use within a text command.  You can always leave this disabled if you only use the GUI..
        /// </summary>
        internal static string HelpShowPresetIndices {
            get {
                return ResourceManager.GetString("HelpShowPresetIndices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When this is checked, zones will be sorted roughly (SE&apos;s ordering isn&apos;t perfect) newest to oldest.  When coupled with the &quot;Allow drag and drop reordering of zones&quot; option, new zones will be added at the top of the list (with everything else remaining in the same order below)..
        /// </summary>
        internal static string HelpSortZonesDescending {
            get {
                return ResourceManager.GetString("HelpSortZonesDescending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SE has banned people for placing out of bounds waymarks.  Please use caution when creating or editing a preset using this calculator..
        /// </summary>
        internal static string HelpWindowTextCircleComputerWarningMessage {
            get {
                return ResourceManager.GetString("HelpWindowTextCircleComputerWarningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Coordinate Systems:.
        /// </summary>
        internal static string HelpWindowTextCoordinates1 {
            get {
                return ResourceManager.GetString("HelpWindowTextCoordinates1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The game internally uses a right-handed 3D coordinate system, with X running West to East, Y running down to up, and Z running North to South.  The on-map coordinate system is a 2D projection of the XZ plane, with X running West to East, and Y running North to South.  Please note that the coordinates presented in chat links or on the map widgets in game are scaled to arbitrary values, and the Y and Z axes are swapped.  This plugin uses the game&apos;s internal coordinate systems as shown below:.
        /// </summary>
        internal static string HelpWindowTextCoordinates2 {
            get {
                return ResourceManager.GetString("HelpWindowTextCoordinates2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clicking the &quot;Edit&quot; button in the preset info pane will bring up a window that allows you to edit a preset.  You can adjust any of the available parameters, and you can drag waymarks on to other waymarks to swap their positions.  You can also drag points from the circle calculator tab in this help window on to a waymark in the editor window to replace its coordinates with the ones from that calculator..
        /// </summary>
        internal static string HelpWindowTextEditing1 {
            get {
                return ResourceManager.GetString("HelpWindowTextEditing1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes made in the editor window will not be applied until the &quot;Save&quot; button is clicked..
        /// </summary>
        internal static string HelpWindowTextEditing2 {
            get {
                return ResourceManager.GetString("HelpWindowTextEditing2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SE has banned people for placing out of bounds waymarks.  Please use caution when manually editing waymark coordinates..
        /// </summary>
        internal static string HelpWindowTextEditingWarningMessage {
            get {
                return ResourceManager.GetString("HelpWindowTextEditingWarningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All presets in this plugin&apos;s list are fully separate from the game&apos;s presets.  This allows you to store an unlimited number of presets, as well as to easily back up and share them, or import presets that others have shared with you..
        /// </summary>
        internal static string HelpWindowTextGeneral1 {
            get {
                return ResourceManager.GetString("HelpWindowTextGeneral1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selecting a preset in the library will show a window to the side with information about that preset, such as where the waymarks are placed, as well as actions that you can take with that preset..
        /// </summary>
        internal static string HelpWindowTextGeneral2 {
            get {
                return ResourceManager.GetString("HelpWindowTextGeneral2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you want to copy a preset in the library to a game slot, select that preset in the list, and then press the button with the number of the slot to which you want to copy it.  If you want to import a preset from the game&apos;s list into the library, scroll down to &quot;Import Options&quot; and press the button of the slot that you wish to import from the game.  This is also where you can paste presets to import them from outside of the game..
        /// </summary>
        internal static string HelpWindowTextGeneral3 {
            get {
                return ResourceManager.GetString("HelpWindowTextGeneral3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you wish to share a preset with someone else, you can select the preset in the library, and click the &quot;Export to Clipboard&quot; button..
        /// </summary>
        internal static string HelpWindowTextGeneral4 {
            get {
                return ResourceManager.GetString("HelpWindowTextGeneral4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plugin also allows you to place and save waymarks directly to/from the field.  These are what the &quot;Place&quot; and &quot;Save Current Waymarks&quot; buttons do.  Please note that saving and placing presets is only supported in areas that the game allows with its built in system.  Saving presets outside of those duties will result in a preset that shows an unknown zone.  Trying to place presets outside of those duties will simply fail to do anything..
        /// </summary>
        internal static string HelpWindowTextGeneral5 {
            get {
                return ResourceManager.GetString("HelpWindowTextGeneral5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Presets can be reordered in the library by dragging and dropping them at the desired spot.  The sorting of duties in the library is by default the same as they are sorted in the game&apos;s files, and is approximately the order in which the duties were added to the game.  Duties can be drag and drop reordered if desired.  If you create your own order by doing this, newly-seen duties will appear at the bottom of the list..
        /// </summary>
        internal static string HelpWindowTextGeneral6 {
            get {
                return ResourceManager.GetString("HelpWindowTextGeneral6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;Map View&quot; window displays a copy of the applicable map(s) for the selected preset&apos;s duty.  Any placed waymarks are shown on the map.  If a zone has multiple submaps, you can switch between submaps using the dropdown in the lower right corner of the window.  The world cordinates corresponding to your cursor position on the map are shown at the bottom right of the window.  Please read the &quot;Coordinates&quot; tab of this help window if you wish to understand the game&apos;s internal coordinate systems, and their rel [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HelpWindowTextMaps1 {
            get {
                return ResourceManager.GetString("HelpWindowTextMaps1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When editing a preset, you can drag waymark icons on the map to adjust their positions.  While you are doing this, the coordinate readout reflects the position of the marker, and not the position of your mouse.  Please note that editing waymarks in this manner is not advised in areas that have uneven ground, as it is not possible to automatically adjust the Y coordinate to match the terrain..
        /// </summary>
        internal static string HelpWindowTextMaps2 {
            get {
                return ResourceManager.GetString("HelpWindowTextMaps2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please also note that the plugin cannot currently determine which waymarks are present on which submaps, so all waymarks are shown at their positions on all submaps (provided that they are within the map&apos;s bounds).  For some rare cases (like e12s), the default submap is not the one in which you enter the area, so you will need to manually select the correct submap..
        /// </summary>
        internal static string HelpWindowTextMaps3 {
            get {
                return ResourceManager.GetString("HelpWindowTextMaps3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm delete: .
        /// </summary>
        internal static string InfoPaneTextConfirmDeleteLabel {
            get {
                return ResourceManager.GetString("InfoPaneTextConfirmDeleteLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy to slot:.
        /// </summary>
        internal static string InfoPaneTextCopytoSlotLabel {
            get {
                return ResourceManager.GetString("InfoPaneTextCopytoSlotLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Last Modified: {0}.
        /// </summary>
        internal static string InfoPaneTextLastModifiedLabel {
            get {
                return ResourceManager.GetString("InfoPaneTextLastModifiedLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No preset selected..
        /// </summary>
        internal static string InfoPaneTextNoPresetSelected {
            get {
                return ResourceManager.GetString("InfoPaneTextNoPresetSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preset Info:.
        /// </summary>
        internal static string InfoPaneTextPresetInfoLabel {
            get {
                return ResourceManager.GetString("InfoPaneTextPresetInfoLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused.
        /// </summary>
        internal static string InfoPaneTextUnusedWaymark {
            get {
                return ResourceManager.GetString("InfoPaneTextUnusedWaymark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waymark.
        /// </summary>
        internal static string InfoPaneTextWaymarkColumnHeader {
            get {
                return ResourceManager.GetString("InfoPaneTextWaymarkColumnHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zone: {0}.
        /// </summary>
        internal static string InfoPaneTextZoneLabel {
            get {
                return ResourceManager.GetString("InfoPaneTextZoneLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid editing data; something went very wrong.  Please press &apos;Cancel&apos; and try again..
        /// </summary>
        internal static string InvalidDataWarning {
            get {
                return ResourceManager.GetString("InvalidDataWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ko-Fi Tip.
        /// </summary>
        internal static string KoFi {
            get {
                return ResourceManager.GetString("KoFi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Search Zones.
        /// </summary>
        internal static string LibraryWindowTextZoneSearchLabel {
            get {
                return ResourceManager.GetString("LibraryWindowTextZoneSearchLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Or import from game slot: .
        /// </summary>
        internal static string MainWindowTextImportfromGameSlotLabel {
            get {
                return ResourceManager.GetString("MainWindowTextImportfromGameSlotLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preset library empty!.
        /// </summary>
        internal static string MainWindowTextLibraryEmpty {
            get {
                return ResourceManager.GetString("MainWindowTextLibraryEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No presets match the current filter..
        /// </summary>
        internal static string MainWindowTextNoPresetsFound {
            get {
                return ResourceManager.GetString("MainWindowTextNoPresetsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Where to find importable presets.
        /// </summary>
        internal static string MainWindowTextPresetResourcesLink {
            get {
                return ResourceManager.GetString("MainWindowTextPresetResourcesLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading zone map(s)..
        /// </summary>
        internal static string MapWindowTextLoadingMaps {
            get {
                return ResourceManager.GetString("MapWindowTextLoadingMaps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No maps available for this zone..
        /// </summary>
        internal static string MapWindowTextNoMapsAvailable {
            get {
                return ResourceManager.GetString("MapWindowTextNoMapsAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Preset Selected.
        /// </summary>
        internal static string MapWindowTextNoPresetSelected {
            get {
                return ResourceManager.GetString("MapWindowTextNoPresetSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown Zone: No maps available..
        /// </summary>
        internal static string MapWindowTextUnknownZone {
            get {
                return ResourceManager.GetString("MapWindowTextUnknownZone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unnamed Sub-map {0}.
        /// </summary>
        internal static string MapWindowTextUnnamedSubmapPlaceholder {
            get {
                return ResourceManager.GetString("MapWindowTextUnnamedSubmapPlaceholder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error retrieving zone name!.
        /// </summary>
        internal static string PresetInfoErrorZoneName1 {
            get {
                return ResourceManager.GetString("PresetInfoErrorZoneName1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Last Modified: .
        /// </summary>
        internal static string PresetInfoLabelLastModified {
            get {
                return ResourceManager.GetString("PresetInfoLabelLastModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zone: .
        /// </summary>
        internal static string PresetInfoLabelZone {
            get {
                return ResourceManager.GetString("PresetInfoLabelZone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        internal static string Settings {
            get {
                return ResourceManager.GetString("Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm delete: .
        /// </summary>
        internal static string SettingsWindowTextConfirmDeleteLabel {
            get {
                return ResourceManager.GetString("SettingsWindowTextConfirmDeleteLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sort Alphabetically.
        /// </summary>
        internal static string TerminologyZoneSortTypeAlphabetical {
            get {
                return ResourceManager.GetString("TerminologyZoneSortTypeAlphabetical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sort by ID.
        /// </summary>
        internal static string TerminologyZoneSortTypeBasic {
            get {
                return ResourceManager.GetString("TerminologyZoneSortTypeBasic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom Sort Order.
        /// </summary>
        internal static string TerminologyZoneSortTypeCustom {
            get {
                return ResourceManager.GetString("TerminologyZoneSortTypeCustom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Paste a preset here and click &quot;Import&quot;..
        /// </summary>
        internal static string TextBoxPromptImport {
            get {
                return ResourceManager.GetString("TextBoxPromptImport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs waymark preset commands.  Use &quot;{0}&quot; for detailed usage information..
        /// </summary>
        internal static string TextCommandDescription {
            get {
                return ResourceManager.GetString("TextCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occured while trying to copy presets to clipboard..
        /// </summary>
        internal static string TextCommandResponseExportAllError1 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportAllError1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waymark library copied to clipboard..
        /// </summary>
        internal static string TextCommandResponseExportAllSuccess1 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportAllSuccess1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No slot or index numbers were provided..
        /// </summary>
        internal static string TextCommandResponseExportError1 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportError1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid game slot number ({0}) was provided..
        /// </summary>
        internal static string TextCommandResponseExportError2 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportError2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid library index ({0}) was provided..
        /// </summary>
        internal static string TextCommandResponseExportError3 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportError3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid game slot number to export ({0}) was provided..
        /// </summary>
        internal static string TextCommandResponseExportError4 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportError4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid library index ({0}) was provided..
        /// </summary>
        internal static string TextCommandResponseExportError5 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportError5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to write to game slot {0}!.
        /// </summary>
        internal static string TextCommandResponseExportError6 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportError6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid game slot number ({0}) was provided as the target..
        /// </summary>
        internal static string TextCommandResponseExportError7 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportError7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occured while trying to export the preset..
        /// </summary>
        internal static string TextCommandResponseExportError8 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportError8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copied to clipboard..
        /// </summary>
        internal static string TextCommandResponseExportSuccess1 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportSuccess1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preset exported to game slot {0}..
        /// </summary>
        internal static string TextCommandResponseExportSuccess2 {
            get {
                return ResourceManager.GetString("TextCommandResponseExportSuccess2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;{0}&quot; to open the GUI.  Use &quot;{1}&quot; for a list of text commands..
        /// </summary>
        internal static string TextCommandResponseHelp {
            get {
                return ResourceManager.GetString("TextCommandResponseHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opens the settings window..
        /// </summary>
        internal static string TextCommandResponseHelpConfig {
            get {
                return ResourceManager.GetString("TextCommandResponseHelpConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copies a preset from the library to the specified game slot *or* copies a preset to the clipboard, depending on flags and parameters.  Usage: &quot;{0} [{1}] [{2}] slot|index [slot]&quot;.  The slot number can be any valid game slot, and index can be any valid library preset number.  Use of the {3} flag specifies that the first number is a game slot, not a library index.  Use of the {4} flag includes the last-modified time in the clipboard export..
        /// </summary>
        internal static string TextCommandResponseHelpExport {
            get {
                return ResourceManager.GetString("TextCommandResponseHelpExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copies all presets in the library to the clipboard, one per line.  Add {0} if you wish to include the last-modified timestamp in the export..
        /// </summary>
        internal static string TextCommandResponseHelpExportAll {
            get {
                return ResourceManager.GetString("TextCommandResponseHelpExportAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copies one of the game&apos;s five preset slots to the library.  Usage: &quot;{0} slot&quot;.  The slot number can be any valid game slot.  Command-line import of a formatted preset string is not supported due to length restrictions in the game&apos;s chat box..
        /// </summary>
        internal static string TextCommandResponseHelpImport {
            get {
                return ResourceManager.GetString("TextCommandResponseHelpImport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Places the preset with the specified name (if possible).  Quotes MUST be used around the name.  May also specify preset index without quotes instead.  Usage: &quot;{0} &lt;name&gt;|&lt;index&gt;&quot;.  Name must match exactly (besides case).  Index can be any valid libary preset number..
        /// </summary>
        internal static string TextCommandResponseHelpPlace {
            get {
                return ResourceManager.GetString("TextCommandResponseHelpPlace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prints the data saved in the game&apos;s slots to the chat window.  Usage: &quot;{0} slot&quot;.  The slot number can be any valid game slot..
        /// </summary>
        internal static string TextCommandResponseHelpSlotInfo {
            get {
                return ResourceManager.GetString("TextCommandResponseHelpSlotInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Valid commands are as follows: {0}, {1}, {2}, {3}, {4}, and {5}.  If no command is provided, the preset library will be opened.  Type &quot;{6} &lt;command&gt;&quot; for detailed subcommand information..
        /// </summary>
        internal static string TextCommandResponseHelpSubcommands {
            get {
                return ResourceManager.GetString("TextCommandResponseHelpSubcommands", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occured while trying to read the game&apos;s waymark data..
        /// </summary>
        internal static string TextCommandResponseImportError1 {
            get {
                return ResourceManager.GetString("TextCommandResponseImportError1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to read game&apos;s waymark data.  This probably means that the plugin needs to be updated for a new version of FFXIV..
        /// </summary>
        internal static string TextCommandResponseImportError2 {
            get {
                return ResourceManager.GetString("TextCommandResponseImportError2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid game slot number was provided: &quot;{0}&quot;..
        /// </summary>
        internal static string TextCommandResponseImportError3 {
            get {
                return ResourceManager.GetString("TextCommandResponseImportError3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imported game preset {0} as library preset {1}..
        /// </summary>
        internal static string TextCommandResponseImportSuccess1 {
            get {
                return ResourceManager.GetString("TextCommandResponseImportSuccess1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find preset &quot;{0}&quot;..
        /// </summary>
        internal static string TextCommandResponsePlaceError1 {
            get {
                return ResourceManager.GetString("TextCommandResponsePlaceError1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid preset number &quot;{0}&quot;..
        /// </summary>
        internal static string TextCommandResponsePlaceError2 {
            get {
                return ResourceManager.GetString("TextCommandResponsePlaceError2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occured placing preset {0}..
        /// </summary>
        internal static string TextCommandResponsePlaceError3 {
            get {
                return ResourceManager.GetString("TextCommandResponsePlaceError3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid preset number &quot;{0}&quot;..
        /// </summary>
        internal static string TextCommandResponsePlaceError4 {
            get {
                return ResourceManager.GetString("TextCommandResponsePlaceError4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to place preset.  This probably means that the plugin needs to be updated for a new version of FFXIV..
        /// </summary>
        internal static string TextCommandResponsePlaceError5 {
            get {
                return ResourceManager.GetString("TextCommandResponsePlaceError5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occured while trying to read the game&apos;s waymark data..
        /// </summary>
        internal static string TextCommandResponseSlotInfoError1 {
            get {
                return ResourceManager.GetString("TextCommandResponseSlotInfoError1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to read game&apos;s waymark data..
        /// </summary>
        internal static string TextCommandResponseSlotInfoError2 {
            get {
                return ResourceManager.GetString("TextCommandResponseSlotInfoError2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid game slot number was provided..
        /// </summary>
        internal static string TextCommandResponseSlotInfoError3 {
            get {
                return ResourceManager.GetString("TextCommandResponseSlotInfoError3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Slot {0} Contents : {1}.
        /// </summary>
        internal static string TextCommandResponseSlotInfoSuccess1 {
            get {
                return ResourceManager.GetString("TextCommandResponseSlotInfoSuccess1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version:.
        /// </summary>
        internal static string Version {
            get {
                return ResourceManager.GetString("Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused.
        /// </summary>
        internal static string WaymarkStatusUnused {
            get {
                return ResourceManager.GetString("WaymarkStatusUnused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waymark Settings.
        /// </summary>
        internal static string WindowTitleConfig {
            get {
                return ResourceManager.GetString("WindowTitleConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug Tools.
        /// </summary>
        internal static string WindowTitleDebugTools {
            get {
                return ResourceManager.GetString("WindowTitleDebugTools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Map View.
        /// </summary>
        internal static string WindowTitleMapView {
            get {
                return ResourceManager.GetString("WindowTitleMapView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Map View - Editing.
        /// </summary>
        internal static string WindowTitleMapViewEditing {
            get {
                return ResourceManager.GetString("WindowTitleMapViewEditing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preset Editor.
        /// </summary>
        internal static string WindowTitlePresetEditor {
            get {
                return ResourceManager.GetString("WindowTitlePresetEditor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preset Info.
        /// </summary>
        internal static string WindowTitlePresetInfo {
            get {
                return ResourceManager.GetString("WindowTitlePresetInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waymark Help.
        /// </summary>
        internal static string WindowTitleWaymarkHelp {
            get {
                return ResourceManager.GetString("WindowTitleWaymarkHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waymark Library.
        /// </summary>
        internal static string WindowTitleWaymarkLibrary {
            get {
                return ResourceManager.GetString("WindowTitleWaymarkLibrary", resourceCulture);
            }
        }
    }
}
